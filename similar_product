import cv2
import numpy as np
from skimage import io
from sklearn.neighbors import NearestNeighbors
import requests
from io import BytesIO
from google.colab.patches import cv2_imshow

# URL of the image
image_url = "https://cdn.zeptonow.com/production///tr:w-400,ar-1021-1021,pr-true,f-auto,q-80/cms/product_variant/e9526a7d-9688-4e92-886f-cc861eb70100.jpeg"

# Download the image
response = requests.get(image_url)
if response.status_code == 200:
    with open('downloaded_image.jpeg', 'wb') as file:
        file.write(response.content)
    print("Image downloaded successfully.")
else:
    print("Failed to retrieve the image. Status code:", response.status_code)
    exit()

# Load the image
image_path = "./downloaded_image.jpeg"
image = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)

# Check if the image is loaded successfully
if image is None:
    print(f"Error loading image from {image_path}")
    exit()
else:
    # Resize the image
    resized_image = cv2.resize(image, (400, 400))

    # Feature extraction using SIFT
    sift = cv2.SIFT_create()
    keypoints, descriptors = sift.detectAndCompute(resized_image, None)

    # Check if descriptors are extracted successfully
    if descriptors is not None:
        # Store the descriptor in a list (even if it's a single image, for consistency)
        all_descriptors = [descriptors]
        image_paths = [image_path]

        # Flatten the list of descriptors
        all_descriptors = np.vstack(all_descriptors)

        # Fit the Nearest Neighbors model (using the single image)
        nbrs = NearestNeighbors(n_neighbors=1, algorithm='auto').fit(all_descriptors)

        # Now you can use this model to query with the same image or any other image's descriptors
        # Example of querying with the same image:
        distances, indices = nbrs.kneighbors(descriptors)

        # Retrieve the corresponding images
        similar_images = [image_paths[i] for i in indices[0]]

        # Display the results
        for similar_image_path in similar_images:
            result_image = cv2.imread(similar_image_path)
            cv2_imshow(result_image)
    else:
        print(f"No descriptors found for image {image_path}")

# Now, let's define a function to query and find similar images
def find_similar_images(query_image_path):
    query_image = cv2.imread(query_image_path, cv2.IMREAD_GRAYSCALE)
    if query_image is None:
        print(f"Error loading query image from {query_image_path}")
        return

    query_image_resized = cv2.resize(query_image, (400, 400))
    query_keypoints, query_descriptors = sift.detectAndCompute(query_image_resized, None)

    if query_descriptors is not None:
        distances, indices = nbrs.kneighbors(query_descriptors)
        similar_images = [image_paths[i] for i in indices[0]]

        # Display the similar images
        for similar_image_path in similar_images:
            result_image = cv2.imread(similar_image_path)
            cv2_imshow(result_image)
    else:
        print(f"No descriptors found for query image {query_image_path}")

# Example of querying with the same image:
find_similar_images(image_path)
